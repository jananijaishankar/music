import React, { useState, useRef, useEffect } from 'react';
import {
  Play, Pause, SkipBack, SkipForward, Volume2,
  Heart, Shuffle, Repeat, MoreHorizontal
} from 'lucide-react';
import musicData from '../db/db.json';

const Home = () => {
  const [songs, Updatemusic] = useState(musicData.items);
  const [currentSong, setCurrentSong] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [volume, setVolume] = useState(1);
  const [isLiked, setIsLiked] = useState(false);
  const [isShuffled, setIsShuffled] = useState(false);
  const [repeatMode, setRepeatMode] = useState(0);
  const [searchTerm, setSearchTerm] = useState('');

  const audioRef = useRef(null);

  useEffect(() => {
    const audio = audioRef.current;
    if (!audio) return;

    const updateTime = () => setCurrentTime(audio.currentTime);
    const updateDuration = () => setDuration(audio.duration);
    const handleEnded = () => {
      if (repeatMode === 2) {
        audio.currentTime = 0;
        audio.play();
      } else if (repeatMode === 1 || currentSong < songs.length - 1) {
        nextSong();
      } else {
        setIsPlaying(false);
      }
    };

    audio.addEventListener('timeupdate', updateTime);
    audio.addEventListener('loadedmetadata', updateDuration);
    audio.addEventListener('ended', handleEnded);

    return () => {
      audio.removeEventListener('timeupdate', updateTime);
      audio.removeEventListener('loadedmetadata', updateDuration);
      audio.removeEventListener('ended', handleEnded);
    };
  }, [currentSong, repeatMode, songs.length]);

  const togglePlayPause = () => {
    if (isPlaying) {
      audioRef.current.pause();
    } else {
      audioRef.current.play();
    }
    setIsPlaying(!isPlaying);
  };

  const nextSong = () => {
    if (isShuffled) {
      const randomIndex = Math.floor(Math.random() * songs.length);
      setCurrentSong(randomIndex);
    } else {
      setCurrentSong((prev) => (prev + 1) % songs.length);
    }
    setIsPlaying(true);
  };

  const prevSong = () => {
    setCurrentSong((prev) => (prev - 1 + songs.length) % songs.length);
    setIsPlaying(true);
  };

  const handleProgressClick = (e) => {
    const progressBar = e.currentTarget;
    const clickX = e.nativeEvent.offsetX;
    const width = progressBar.offsetWidth;
    const newTime = (clickX / width) * duration;
    audioRef.current.currentTime = newTime;
    setCurrentTime(newTime);
  };

  const formatTime = (time) => {
    if (isNaN(time)) return '0:00';
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  const handleVolumeChange = (e) => {
    const newVolume = e.target.value;
    setVolume(newVolume);
    audioRef.current.volume = newVolume;
  };

  const selectSong = (index) => {
    setCurrentSong(index);
    setIsPlaying(true);
  };

  const toggleRepeat = () => {
    setRepeatMode((prev) => (prev + 1) % 3);
  };

  const filteredSongs = songs.filter((song) => {
    const term = searchTerm.toLowerCase();
    return (
      song.title.toLowerCase().includes(term) ||
      song.singer.toLowerCase().includes(term) ||
      song.genre.toLowerCase().includes(term)
    );
  });

  const currentSongData = songs[currentSong];

  return (
    <div className="min-h-screen bg-black text-white flex flex-col">
      <audio
        ref={audioRef}
        src={currentSongData.songUrl}
        onLoadedData={() => isPlaying && audioRef.current.play()}
      />

      {/* Top Bar */}
      <div className="flex items-center justify-between p-4 border-b border-blue-900">
        <div className="flex items-center space-x-4">
          <div className="flex space-x-2">
            <div className="w-3 h-3 bg-red-500 rounded-full"></div>
            <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
            <div className="w-3 h-3 bg-green-500 rounded-full"></div>
          </div>
          <h1 className="text-white font-bold text-lg">Music Player</h1>
        </div>
        <button className="p-2 hover:bg-blue-900 rounded-full transition-colors">
          <MoreHorizontal size={20} className="text-blue-300" />
        </button>
      </div>

      <div className="flex-1 flex">
        {/* Sidebar */}
        <div className="w-80 bg-black border-r border-blue-900 p-4">
          <div className="mb-6">
            <h2 className="text-white font-bold text-lg mb-4">Your Library</h2>

            {/* Search Input */}
            <div className="relative mb-4">
              <input
                type="text"
                placeholder="Search songs..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full p-2 pr-8 rounded bg-blue-950 text-white placeholder-blue-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              {searchTerm && (
                <button
                  onClick={() => setSearchTerm('')}
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 text-blue-300 hover:text-white"
                >
                  ✕
                </button>
              )}
            </div>

            <div className="space-y-1">
              {filteredSongs.map((song, index) => {
                const realIndex = songs.indexOf(song);
                return (
                  <div
                    key={song.id || index}
                    onClick={() => selectSong(realIndex)}
                    className={`group flex items-center p-3 rounded-lg cursor-pointer transition-all duration-200 ${
                      currentSong === realIndex
                        ? 'bg-blue-900 bg-opacity-50'
                        : 'hover:bg-blue-900 hover:bg-opacity-20'
                    }`}
                  >
                    <div className="relative mr-3">
                      <img
                        src={song.imgUrl}
                        alt={song.title}
                        className="w-12 h-12 rounded object-cover"
                        onError={(e) => {
                          e.target.src = 'https://via.placeholder.com/48x48/1e40af/60a5fa?text=♪';
                        }}
                      />
                      {currentSong === realIndex && (
                        <div className="absolute inset-0 bg-black bg-opacity-60 flex items-center justify-center rounded">
                          {isPlaying ? (
                            <div className="flex space-x-0.5">
                              <div className="w-0.5 h-3 bg-blue-400 animate-pulse"></div>
                              <div className="w-0.5 h-4 bg-blue-400 animate-pulse" style={{ animationDelay: '0.1s' }}></div>
                              <div className="w-0.5 h-2 bg-blue-400 animate-pulse" style={{ animationDelay: '0.2s' }}></div>
                              <div className="w-0.5 h-3 bg-blue-400 animate-pulse" style={{ animationDelay: '0.3s' }}></div>
                            </div>
                          ) : (
                            <Play size={16} className="text-white" />
                          )}
                        </div>
                      )}
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className={`font-medium truncate ${currentSong === realIndex ? 'text-blue-400' : 'text-white'}`}>
                        {song.title}
                      </p>
                      <p className="text-sm text-blue-300 truncate">{song.singer}</p>
                    </div>
                    <button className="opacity-0 group-hover:opacity-100 p-1 hover:bg-blue-800 rounded transition-all">
                      <Heart size={16} className="text-blue-300" />
                    </button>
                  </div>
                );
              })}
            </div>
          </div>
        </div>

        {/* Main Content */}
        {/* ... your main content and bottom player stay the same ... */}
        {/* Please keep the rest of the player code you already have */}
      </div>
    </div>
  );
};

export default Home;
